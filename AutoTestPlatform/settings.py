"""
Django settings for AutoTestPlatform project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import sys,datetime
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0,os.path.join(BASE_DIR,"apps"))
BASE_LOG_DIR = os.path.join(BASE_DIR, "log")

#文件上传的路径
UPLOAD_ROOT=os.path.join(BASE_DIR,'media')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '8b8^-)!=16f14n5nf+=(4)w=epjju9uqc+pfx(jz-198d^+==2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

#声明Django认证系统使用的模型类
AUTH_USER_MODEL = 'taste_user.User'  # 指定替换的用户模型类
# 默认登录的URL
LOGIN_URL='/login/'

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'apps.apitest.apps.TestplatformConfig',
    'apitest',
    'project_env',
    'taste_user',
    'webtest',
    'django_apscheduler'

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'lib.middleware.permissionMiddleware'
]

ROOT_URLCONF = 'AutoTestPlatform.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'AutoTestPlatform.wsgi.application'

#发送邮件配置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# 每个邮箱都有不同的服务器 163邮箱为smtp.163.com，qq邮箱为smtp.qq.com
EMAIL_HOST = 'smtp.163.com'
EMAIL_PORT = 25

# 发送源即发送邮件的邮箱
EMAIL_HOST_USER = '18201037154@163.com'

# 在邮箱中设置的客户端授权密码

EMAIL_HOST_PASSWORD = 'ETHRQSQVAUBMQKLG'

#这个邮箱必须和上面的发送源邮箱相同。
EMAIL_FROM = '发送人<18201037154@163.com>'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

#log日志
LOGGING = {
    'version': 1,  # 保留字
    'disable_existing_loggers': False,  # 禁用已经存在的logger实例
    # 日志文件的格式
    'formatters': {
        # 详细的日志格式
        'standard': {
            "format": "%(asctime)s - %(levelname)s - %(message)s",
        },
    },
    # 过滤器
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    # 处理器
    'handlers': {
        # # 在终端打印
        # 'console': {
        #     'level': 'DEBUG',
        #     'filters': ['require_debug_true'],  # 只有在Django debug为True时才在屏幕打印日志
        #     'class': 'logging.StreamHandler',  #
        #     'formatter': 'standard'
        # },
        # 默认的
        'default': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            # 'filename': os.path.join(BASE_LOG_DIR, "message.log"),  # 保存到一个日志文件中
            'filename': './log/' + datetime.datetime.now().strftime("%Y-%m-%d") + 'message.log',
            'maxBytes': 1024 * 1024 * 500,  # 日志大小 500M
            'backupCount': 3,  # 最多备份几个
            'formatter': 'standard',
            'encoding': 'utf-8',
        },

    },
    'loggers': {
        # 默认的logger应用如下配置
        '': {
            # 'handlers': ['default', 'console'],  # 上线之后可以把'console'移除
            'handlers': ['default'],  # 上线之后可以把'console'移除
            'level': 'DEBUG',
            'propagate': True,  # 向不向更高级别的logger传递
        },

    },
}

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [os.path.join(BASE_DIR, "static"),]
